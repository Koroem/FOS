import requests
import json
import time

enum_values = {
    "brands_tags": ["Carrefour", "Auchan", "Bonarea", "Nestle", "Lidl", "Coop", "U", "Hacendado", "Delhaize", "Marque-repere", "Aldi", "Migros", "Tesco", "Casino", "Spar", "Leader-price", "Great-value", "Knorr", "Danone", "Boni", "Cora", "Le-gaulois", "Monoprix", "Gut-gunstig", "Asda", "Trader-joe-s", "Kroger", "Meijer", "Mercadona", "Picard", "Leclerc", "Marks-spencer", "Morrisons", "Haribo", "Lindt", "Penny", "Dia", "H-e-b", "Eurospin", "Edeka", "Rewe", "Netto", "Waitrose", "Eroski", "Wegmans", "Milbona", "Kellogg-s", "Maggi", "Dr-oetker", "Thiriet", "K-classic", "Carrefour-bio", "Conad", "Heinz", "La-vie-claire", "Coca-cola", "Sainsbury-s", "Albert-heijn", "E-leclerc", "Franprix", "Yoplait", "Lipton", "El-corte-ingles", "Unilever", "Alnatura", "Prozis", "Ja", "Shoprite", "Coles", "Belle-france", "Despar", "Kaufland", "By-sainsbury-s", "Bio-village", "Bonduelle", "Fleury-michon", "Unes", "Esselunga", "Myprotein", "Alteza", "Whole-foods-market", "Selex", "Lay-s", "Bonpreu", "Entrepinares", "Maxidi", "Milka", "Jumbo", "Sans-marque", "Barilla", "Food-lion", "Maitre-coq", "Intermarche", "Md", "Cadbury", "Charal", "Ferrero", "Todis", "Target-stores", "Rewe-beste-wahl", "Consum", "Savencia", "Giant-eagle", "Hipp", "Dm-bio", "Eliges", "Harris-teeter", "Ahold", "Nescafe", "Pam-panorama", "Kirkland", "Weis", "Food-club", "Roundy-s", "Mccormick", "Continente", "Spartan", "Quaker", "M-classic", "Bonne-maman", "Goya", "Deco", "Starbucks", "Woolworths", "Alipende", "La-nouvelle-agriculture", "The-kroger-co", "Mondelez", "Del-monte", "Migros-bio", "Consilia", "Compliments", "Deluxe", "Chef-select", "Primia", "Andros", "Western-family", "Bofrost", "Bennet", "Bjorg", "Hannaford", "Essential-everyday", "Sprouts", "Findus", "Hema", "Jardin-bio", "365-everyday-value", "Denner", "Colruyt", "U-bio", "Biocoop", "Naturaplan", "Crai", "Market-pantry", "Lu", "Herta", "M-s", "Grand-frais", "Gourmet", "Betty-bossi", "Pepsi"],
    "nutrition_grades_tags": ["A","B","C","D","E","Not applicable","Unknown"],
    "allergens_tags": ["Milk","Gluten","Soybeans","Eggs","Nuts","Fish","Mustard","Celery","Peanuts","Sulphur dioxide and sulphites","Sesame seeds","Crustaceans","Molluscs","None","Lupin"],
    "labels_tags": ["Organic", "EU Organic", "Green Dot", "No gluten", "Vegetarian", "Vegan", "No preservatives", "Nutriscore", "No colorings", "EU Agriculture", "No added sugar", "No lactose", "Non-EU Agriculture", "EU/non-EU Agriculture","No palm oil", "No artificial flavors", "European Vegetarian Union",  "USDA Organic", "PDO", "No GMOs", "French pork", "Halal",  "Nutriscore Grade B", "Fair trade", "French poultry", "Sustainable farming", "Sustainable", "No additives", "UTZ Certified", "European Vegetarian Union Vegan", "PGI", "FSC",  "Sustainable Seafood MSC",  "Sustainable fishery", "Non GMO project", "Rainforest Alliance", "UTZ Certified Cocoa", "The Vegan Society", "Not advised for specific people", "Not advised for pregnant women","Low or no sugar",  "No artificial colors",  "High proteins", "Fairtrade International",  "Carbon footprint","Source of fibre", "Biodynamic agriculture",  "Demeter",  "No flavors",  "Natural flavors", "de:Ohne Gentechnik", "High fibres", "Distributor labels",  "German Agricultural Society", "Low or no fat", "Canada Organic", "Gold medal of the German Agricultural Society", "Pure cocoa butter", "Superior quality", "Certified by Ecocert", "With Sunflower oil", "Sustainable Palm Oil", "No sugar", "Responsible aquaculture", "Responsible aquaculture ASC", "Low or no salt", "100% natural",  "Orthodox Union Kosher", "European Vegetarian Union Vegetarian", "Pure butter", "No flavour enhancer", "Suisse Garantie", "Low fat", "QS certification mark",  "Contains a source of phenylalanine", "Bioland", "COR Kosher", "Low sugar", "Vegan Action", "No milk", "Packaged in France", "Free range", "With sweeteners", "EAC", "No artificial colours or flavours", "Soil Association Organic","Class I"],
    "manufacturing_places_tags": ["France", "Italy", "Deutschland", "Espana", "Bretagne", "Italie", "Italia", "Belgique", "Suisse", "Allemagne", "Mexico", "Espagne", "United-kingdom", "Česka-republika", "Polska", "Portugal", "Tunisie", "Canada", "Germany", "Argentina", "Usa", "Australia", "Czech-republic", "Pays-de-la-loire", "Pays-bas", "Italien", "Normandie", "Finistere", "Spain", "Conserve-italia-s-p-a", "Osterreich", "Royaume-uni", "Switzerland", "United-states", "Bolivia", "Thailand", "Romania", "Sweden", "China", "Vendee", "Provence", "Union-europeenne", "Россия", "Ciudad-de-mexico", "Česko", "Alsace", "Rhone-alpes", "Thailande", "Belgium",  "Suomi", "Finland", "Morbihan", "Serbia", "Uk", "Chine", "Sverige", "Navarra", "Castilla-y-leon", "Centre-val-de-loire", "Netherlands", "Ille-et-vilaine", "Andalucia", "Alemania",  "Loiret", "Loire-atlantique", "Comunidad-valenciana", "Sarthe", "India", "Schweiz", "Maroc", "Quiberon", "Savoie", "Nord", "Calvados", "Austria", "Slovensko", "Basse-normandie", "Singapore", "Niederlande", "Formec-biffi-spa", "Poland", "Pologne", "Francia", "Cotes-d-armor", "Grece", "Magyarorszag", "Estados-unidos", "Vietnam", "La-paz", "Colombia", "Spanien", "Isere", "Norway", "Greece", "Eu","Chile", "Pas-de-calais", "Cataluna", "Ireland", "Algerie", "Malaysia", "Lot-et-garonne", "Fietta-s-p-a", "Cochabamba", "Ile-de-france", "Taiwan", "Frankreich", "Pastificio-lucio-garofalo-s-p-a", "Sammontana-s-p-a", "Santa-cruz", "Aveyron", "Lorraine",  "Castilla-la-mancha", "Quebec", "Bourgogne", "Angleterre", "Estado-de-mexico", "Franche-comte", "Hamburg", "Drome", "Nederland", "Turquie", "Buenos-aires", "Danemark", "Denmark", "Etats-unis", "Vaucluse",   "Scotland", "Madrid", "Murcia",  "Brasil", "Ue",  "Chiostro-di-saronno", "Valencia-provincia", "Midi-pyrenees",  "Turkey", "Japan", "New-zealand", "Autriche", "Espanha", "Germania", "Corse", "Peru", "Israel", "Gard", "Ecosse", "Barcelona", "Alicante-provincia"],
    "countries_tags_en": ["France","United States","Spain","Italy","Germany","United Kingdom","Switzerland","Belgium","Canada","Ireland","Australia","Netherlands","Russia","Poland","Romania","Austria","Portugal","Morocco","Mexico","Sweden","Luxembourg","Bulgaria","Czech Republic","Argentina","Finland","Norway","Brazil","Thailand","Hungary","India","Japan","Algeria","Denmark","Réunion","Singapore","New Zealand","Greece","Saudi Arabia","Colombia","Croatia","Turkey","Chile","Indonesia","United Arab Emirates","South Africa","Philippines","Lithuania","Tunisia","Puerto Rico","Serbia","New Caledonia","Slovakia","Israel","French Polynesia","Ukraine","Malaysia","Guadeloupe","French Guiana","Bolivia","Hong Kong","Egypt","Lebanon","Kuwait","Iraq","Qatar","Slovenia","Peru","Martinique","Senegal","Georgia","Panama"],
    "categories_tags": ["Plant-based foods and beverages", "Plant-based foods", "Snacks", "Sweet snacks", "Beverages", "Dairies", "Cereals and potatoes", "Meats and their products", "Fermented foods", "Fermented milk products", "Meats", "Condiments", "Fruits and vegetables based foods", "Biscuits and cakes", "Meals", "Desserts", "groceries", "Cereals and their products", "Spreads", "Sauces", "Cheeses", "Breakfasts", "Confectioneries", "Frozen foods", "Prepared meats", "Plant-based beverages", "Vegetables based foods", "Canned foods", "Sweet spreads", "Seafood", "Fruits based foods", "Cocoa and its products", "Biscuits", "Dairy desserts", "Plant-based spreads", "Breads", "Fats", "Fishes", "Fermented dairy desserts", "Pastas", "Sweeteners", "Salty snacks", "Alcoholic beverages", "Yogurts", "Vegetable fats", "Cakes", "Poultries", "Farming products", "Legumes and their products", "Seeds", "Canned plant-based foods", "Frozen desserts", "Appetizers", "Fatty fishes", "Fruit-based beverages", "Chocolates", "Dried products", "Vegetable oils", "Nuts and their products", "Bee products", "Juices and nectars", "Fruit and vegetable preserves", "Honeys", "Hot beverages", "Chocolate candies", "Legumes", "Chicken and its products", "Olive tree products", "Cow cheeses", "Breakfast cereals", "Carbonated drinks", "Chickens", "Dietary supplements", "Fruits", "Jams", "Hams", "Milks", "Soups", "Canned vegetables", "Candies", "Salted spreads", "Sausages", "Chips and fries", "Fruit juices", "Sodas", "Cereal grains", "Nuts", "French cheeses", "Crisps", "Meals with meat", "Teas", "Dairy substitutes", "Olive oils", "Dried plant-based foods", "Ice creams and sorbets", "Wines", "Waters", "Pastries", "Pizzas pies and quiches", "Pasta dishes", "Viennoiseries"],
}

base_url = "https://world.openfoodfacts.org/api/v2/search?"
valid_values = {}
headers={}
proxy={}
for enum_type, values in enum_values.items():
    valid_values[enum_type] = []
    for value in values:
        url = base_url + f"{enum_type}={value}"
        print(url,"\n")
        try:
            response = requests.get(url)
            data = json.loads(response.text)
            time.sleep(5)
            if "products" in data and data["products"]:
                valid_values[enum_type].append(value)
                print(f"Success: {enum_type} - {value}")
            else:
                print(f"Fail: {enum_type} - {value}")
        except json.decoder.JSONDecodeError:
            print(f"Failed to parse JSON: {enum_type} - {value}")

for enum_type, values in valid_values.items():
    valid_values[enum_type] = sorted(values)

with open("enums.sql", "w") as file:
    for enum_type, values in valid_values.items():
        enum_name = enum_type.replace("_tags", "").replace("_", " ")
        enum_values_str = ", ".join([f"'{value}'" for value in values])
        enum_definition = f"CREATE TYPE {enum_name} AS ENUM (\n    {enum_values_str}\n);\n"
        print(enum_definition)
        file.write(enum_definition)